# -*- coding: utf-8 -*-
from decimal import *
import telebot
import datetime
from telebot import types, apihelper
import sqlite3
import random
import string
import time
import os
import random
import shutil
import subprocess
import json
import keyboards
import requests
from datetime import datetime, timedelta
import chat_list
from datetime import date
from dateutil.relativedelta import relativedelta
import secrets
import hashlib
import config
from getpass import getpass
from mysql.connector import connect, Error
import pytz
from qiwipyapi import Wallet

TOKEN = config.bot_osnova_token
bot = telebot.TeleBot(TOKEN)
admin = config.admin

QIWI_SEC_TOKEN = 'e16eab84d3d2f325aa07fdedca3bad5d'
wallet_number = '79361070977'  # without +

wallet_p2p = Wallet(wallet_number, p2p_sec_key=QIWI_SEC_TOKEN)


@bot.message_handler(commands=['start'])
def start_message(message):
    if message.chat.type == 'private':
        userid = str(message.chat.id)
        username = str(message.from_user.username)
        connection = connect(host=config.bd_host, user=config.bd_login, password=config.bd_pass,
                             database=config.bd_base)
        q = connection.cursor()
        q.execute(f'SELECT * FROM ugc_users WHERE id = "{userid}"')
        row = q.fetchall()
        if str(row) == '[]':
            q.execute(
                "INSERT INTO ugc_users (id,data) VALUES ('%s','%s')" % (userid, '–ù–µ—Ç'))
            connection.commit()
            if message.text[7:] != '':
                if message.text[7:] != userid:
                    q.execute("update ugc_users set ref = " +
                              str(message.text[7:]) + " where id = " + str(userid))
                    connection.commit()
                    q.execute(
                        "update ugc_users set ref_colvo = ref_colvo + 1 where id = " + str(message.text[7:]))
                    connection.commit()
                    bot.send_message(message.text[7:], f'‚ûï –ù–æ–≤—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä: @{message.from_user.username}',
                                     reply_markup=keyboards.main)

            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton(text=f'''üí¢ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–µ—Ä–≤–∏—Å ?!''',
                                                    url=f'https://telegra.ph/Informaciya-po-proektu-10-06'))
            bot.send_message(message.chat.id,
                             f'üí° –ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å–æ —Å—Ç–∞—Ç—å–µ–π: https://telegra.ph/Informaciya-po-proektu-10-06',
                             parse_mode='HTML', reply_markup=keyboard, disable_web_page_preview=True)

        bot.send_message(message.chat.id, f'üëë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ !', parse_mode='HTML',
                         reply_markup=keyboards.main)


@bot.message_handler(content_types=['text'])
def send_text(message):
    if message.chat.type == 'private':
        if message.text.lower() == '/admin':
            if message.chat.id == admin:
                connection = connect(host=config.bd_host, user=config.bd_login, password=config.bd_pass,
                                     database=config.bd_base)
                q = connection.cursor()
                q.execute(f'SELECT COUNT(id) FROM ugc_users')
                all_user_count = q.fetchone()[0]

                q.execute(f'SELECT COUNT(id) FROM ugc_users WHERE data != "–ù–µ—Ç"')
                all_user_podpiska = q.fetchone()[0]

                q.execute(f'SELECT COUNT(id) FROM akk')
                akkakk = q.fetchone()[0]

                q.execute(f'SELECT COUNT(id) FROM list_chat')
                chat = q.fetchone()[0]

                q.execute(f'SELECT COUNT(id) FROM logi')
                colvo_send_1 = q.fetchone()[0]

                q.execute(f'SELECT SUM(colvo_send) FROM list_chat')
                colvo_sends = q.fetchone()[0]

                q.execute(
                    f'SELECT COUNT(id) FROM list_chat WHERE status = "Send"')
                chat_no_send = q.fetchone()[0]

                keyboard = types.InlineKeyboardMarkup()
                keyboard.add(types.InlineKeyboardButton(text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', callback_data=f'admin_search_user'),
                             types.InlineKeyboardButton(text='–ß–∞—Ç—ã', callback_data=f'admin_search_chat'))
                keyboard.add(types.InlineKeyboardButton(text='–†–∞—Å—Å—ã–ª–∫–∞', callback_data='send_sms_bot'),
                             types.InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç', callback_data='del_akkss'))
                keyboard.add(types.InlineKeyboardButton(text='–û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è', callback_data='timeupdate'),
                             types.InlineKeyboardButton(text='–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞', callback_data='restartsssss'))
                keyboard.add(types.InlineKeyboardButton(
                    text='–°–º–µ–Ω–∞ –ø—Ä–∞–π—Å–∞', callback_data='—Å–º–µ–Ω–∞–ø—Ä–∞–π—Å–∞'))
                bot.send_message(message.chat.id, f'''‚ñ™Ô∏è–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {all_user_count}
‚ñ™Ô∏è–ü–æ–¥–ø–∏—Å–æ–∫ {all_user_podpiska}
‚ñ™Ô∏è–ê–∫–∫–∞—É–Ω—Ç–æ–≤: {akkakk}
‚ñ™Ô∏è–ß–∞—Ç–æ–≤: {chat} 
‚ñ™Ô∏è–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {colvo_sends}
‚ñ™Ô∏è–£—Å–ø–µ—à–Ω–æ: {colvo_send_1}
‚ñ™Ô∏è–û—á–µ—Ä–µ–¥—å: {chat_no_send}''', parse_mode='HTML', reply_markup=keyboard)

        elif message.text.lower() == 'üéõ –º–µ–Ω—é':
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton(text=f'''‚è≥ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥''', callback_data=f'akks'),
                         types.InlineKeyboardButton(text=f'''üí¨ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫''', callback_data=f'–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫'))
            keyboard.add(types.InlineKeyboardButton(text=f'''üñ• –ü—Ä–æ—Ñ–∏–ª—å''', callback_data=f'profale'),
                         types.InlineKeyboardButton(text=f'''üìñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è''', callback_data=f'info'))
            bot.send_message(message.chat.id, f'''‚óæÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é:''', parse_mode='HTML',
                             reply_markup=keyboard)
            return


def check_time_difference(t1: datetime, t2: datetime):
    t1_date = datetime(
        t1.year,
        t1.month,
        t1.day,
        t1.hour,
        t1.minute,
        t1.second)

    t2_date = datetime(
        t2.year,
        t2.month,
        t2.day,
        t2.hour,
        t2.minute,
        t2.second)

    t_elapsed = t1_date - t2_date

    return t_elapsed


def new_data(message):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(
        text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''', callback_data=f'akks'))
    if message.text != 'üéõ –ú–µ–Ω—é':
        connection = connect(host=config.bd_host, user=config.bd_login, password=config.bd_pass,
                             database=config.bd_base)
        q = connection.cursor()
        q.execute(
            f'SELECT chat FROM ugc_users where id =  "{message.chat.id}"')
        chat_chat = q.fetchone()[0]
        q = connection.cursor()
        if int(tipsend) == 4:
            q.execute(
                f"update list_chat set photo = '{message.text}' where id_str = '{chat_chat}'")
            connection.commit()
        if int(tipsend) == 1:
            q.execute(
                f"update list_chat set username = '{message.text}' where id_str = '{chat_chat}'")
            connection.commit()
        if int(tipsend) == 6:
            q.execute(
                f"update list_chat set dop_text = '{message.text}' where id_str = '{chat_chat}'")
            connection.commit()
        if int(tipsend) == 2:
            if int(message.text) >= 1:
                q.execute(
                    f"update list_chat set time = '{message.text}' where id_str = '{chat_chat}'")
                connection.commit()
                clock_in_half_hour = datetime.now() + timedelta(minutes=(int(message.text)))
                q.execute(
                    f"update list_chat set time_step = '{clock_in_half_hour.hour}:{clock_in_half_hour.minute}' where id_str = '{chat_chat}'")
                connection.commit()
        bot.send_message(message.chat.id, '‚úîÔ∏è –ì–æ—Ç–æ–≤–æ',
                         parse_mode='HTML', reply_markup=keyboard)
    else:
        bot.send_message(message.chat.id, '–û—Ç–º–µ–Ω–∏–ª–∏',
                         parse_mode='HTML', reply_markup=keyboard)


def new_data_m(message):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(
        text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''', callback_data=f'akks'))
    if message.text != 'üéõ –ú–µ–Ω—é':
        connection = connect(host=config.bd_host, user=config.bd_login, password=config.bd_pass,
                             database=config.bd_base)
        q = connection.cursor()
        q.execute(f'SELECT akk FROM ugc_users where id =  "{message.chat.id}"')
        chat_chat = q.fetchone()[0]
        if int(tipsend11) == 4:
            q.execute(
                f"update list_chat set photo = '{message.text}' where akk = '{chat_chat}'")
            connection.commit()
            bot.send_message(message.chat.id, '‚úîÔ∏è –ì–æ—Ç–æ–≤–æ',
                             parse_mode='HTML', reply_markup=keyboard)
        if int(tipsend11) == 1:
            q.execute(
                f"update list_chat set username = '{message.text}' where akk = '{chat_chat}'")
            connection.commit()
            bot.send_message(message.chat.id, '‚úîÔ∏è –ì–æ—Ç–æ–≤–æ',
                             parse_mode='HTML', reply_markup=keyboard)

        if int(tipsend11) == 5:
            try:
                id_old_akk = message.text.split('\n')[0]
                id_new_akk = message.text.split('\n')[1]
                q.execute(
                    f"SELECT * FROM list_chat where akk = '{id_old_akk}'")
                row = q.fetchall()
                for i in row:
                    q.execute(
                        "INSERT INTO list_chat (id,username,name,time,time_step,photo,akk,id_user,status,colvo_send,dop_text) VALUES ('%s','%s','%s','%s','%s','%s','%s','%s','%s','%s','%s')" % (
                            i[1], i[2], i[3], i[4], i[5], i[6], id_new_akk, i[8], i[9], i[10], i[11]))
                    connection.commit()
                    print(i[0])
                bot.send_message(message.chat.id, '‚úîÔ∏è –ì–æ—Ç–æ–≤–æ',
                                 parse_mode='HTML', reply_markup=keyboard)
            except Exception as e:
                bot.send_message(
                    message.chat.id, f'‚úñÔ∏è –û—à–∏–±–∫–∞: {e}', parse_mode='HTML', reply_markup=keyboard)

    else:
        bot.send_message(message.chat.id, '–û—Ç–º–µ–Ω–∏–ª–∏',
                         parse_mode='HTML', reply_markup=keyboard)


def smena_prace(message):
    if message.text != '–û—Ç–º–µ–Ω–∞':
        ned = message.text.split('\n')[0]
        mes = message.text.split('\n')[1]
        s2mes = message.text.split('\n')[2]
        life = message.text.split('\n')[3]
        connection = connect(host=config.bd_host, user=config.bd_login, password=config.bd_pass,
                             database=config.bd_base)
        q = connection.cursor()
        q.execute(f"update config set ned = '{ned}' where id = '1'")
        connection.commit()
        q.execute(f"update config set mes = '{mes}' where id = '1'")
        connection.commit()
        q.execute(f"update config set 2mes = '{s2mes}' where id = '1'")
        connection.commit()
        q.execute(f"update config set life = '{life}' where id = '1'")
        connection.commit()
        bot.send_message(
            message.chat.id, '–£—Å–ø–µ—à–Ω–æ!  | /admin', parse_mode='HTML')


def send_photoorno(message):
    if message.text != '–û—Ç–º–µ–Ω–∞':
        global text_send_all
        text_send_all = message.text
        msg = bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –º–µ–¥–∏–∞', parse_mode='HTML',
                               disable_web_page_preview=True)
        bot.register_next_step_handler(msg, admin_send_message_all_text_rus)


def admin_send_message_all_text_rus(message):
    if message.text != '–û—Ç–º–µ–Ω–∞':
        global media
        media = message.text
        if int(tipsendSSSSS) == 1:
            msg = bot.send_photo(message.chat.id, str(media),
                                 "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:\n" +
                                 text_send_all + '\n\n–ï—Å–ª–∏ –≤—ã —Å–æ–≥–ª–∞—Å–Ω—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –î–∞',
                                 parse_mode='HTML')
            bot.register_next_step_handler(
                msg, admin_send_message_all_text_da_rus)

        if int(tipsendSSSSS) == 2:
            msg = bot.send_animation(chat_id=message.chat.id, animation=media,
                                     caption="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:\n" +
                                     text_send_all + '\n\n–ï—Å–ª–∏ –≤—ã —Å–æ–≥–ª–∞—Å–Ω—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –î–∞',
                                     parse_mode='HTML')
            bot.register_next_step_handler(
                msg, admin_send_message_all_text_da_rus)

        if int(tipsendSSSSS) == 3:
            media = f'<a href="{media}">.</a>'
            msg = bot.send_message(message.chat.id, f'''–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:
{text_send_all}
{media}
–ï—Å–ª–∏ –≤—ã —Å–æ–≥–ª–∞—Å–Ω—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –î–∞''', parse_mode='HTML')
            bot.register_next_step_handler(
                msg, admin_send_message_all_text_da_rus)


def admin_send_message_all_text_da_rus(message):
    otvet = message.text
    colvo_send_message_users = 0
    colvo_dont_send_message_users = 0
    if message.text != '–û—Ç–º–µ–Ω–∞':
        if message.text.lower() == '–î–∞'.lower():
            connection = connect(host=config.bd_host, user=config.bd_login, password=config.bd_pass,
                                 database=config.bd_base)
            with connection:
                q = connection.cursor()
                bot.send_message(message.chat.id, '–ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å!')
                if int(tipsendSSSSS) == 1:  # –∫–∞—Ä—Ç–∏–Ω–∫–∞
                    q.execute("SELECT * FROM ugc_users")
                    row = q.fetchall()
                    for i in row:
                        jobid = i[0]

                        time.sleep(0.1)
                        reply = json.dumps(
                            {'inline_keyboard': [[{'text': '‚úñÔ∏è –ó–∞–∫—Ä—ã—Ç—å', 'callback_data': f'–ì–ª–∞–≤–Ω–æ–µ'}]]})
                        response = requests.post(
                            url='https://api.telegram.org/bot{0}/{1}'.format(
                                TOKEN, "sendPhoto"),
                            data={'chat_id': jobid, 'photo': str(media), 'caption': str(text_send_all),
                                  'reply_markup': str(reply), 'parse_mode': 'HTML'}
                        ).json()
                        if response['ok'] == False:
                            colvo_dont_send_message_users = colvo_dont_send_message_users + 1
                            q.execute(
                                f"DELETE FROM ugc_users where id = '{jobid}'")
                            connection.commit()
                        else:
                            colvo_send_message_users = colvo_send_message_users + 1
                    bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ' + str(
                        colvo_send_message_users) + '\n–ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ' + str(colvo_dont_send_message_users))

                elif int(tipsendSSSSS) == 2:  # –≥–∏—Ñ
                    q.execute("SELECT * FROM ugc_users")
                    row = q.fetchall()
                    for i in row:
                        jobid = i[0]

                        time.sleep(0.1)
                        reply = json.dumps(
                            {'inline_keyboard': [[{'text': '‚úñÔ∏è –ó–∞–∫—Ä—ã—Ç—å', 'callback_data': f'–ì–ª–∞–≤–Ω–æ–µ'}]]})
                        response = requests.post(
                            url='https://api.telegram.org/bot{0}/{1}'.format(
                                TOKEN, "sendAnimation"),
                            data={'chat_id': jobid, 'animation': str(media), 'caption': str(text_send_all),
                                  'reply_markup': str(reply), 'parse_mode': 'HTML'}
                        ).json()
                        if response['ok'] == False:
                            colvo_dont_send_message_users = colvo_dont_send_message_users + 1
                        else:
                            colvo_send_message_users = colvo_send_message_users + 1
                    bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ' + str(
                        colvo_send_message_users) + '\n–ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ' + str(colvo_dont_send_message_users))

                elif int(tipsendSSSSS) == 3:  # –≤–∏–¥–µ–æ
                    q.execute("SELECT * FROM ugc_users")
                    row = q.fetchall()
                    for i in row:
                        jobid = i[0]
                        time.sleep(0.2)
                        response = requests.post(
                            url='https://api.telegram.org/bot{0}/{1}'.format(
                                TOKEN, "sendMessage"),
                            data={'chat_id': jobid, 'text': str(
                                text_send_all) + str(media), 'parse_mode': 'HTML'}
                        ).json()
                        if response['ok'] == False:
                            colvo_dont_send_message_users = colvo_dont_send_message_users + 1
                            q.execute(
                                f"DELETE FROM ugc_users where id = '{jobid}'")
                            connection.commit()

                        else:
                            colvo_send_message_users = colvo_send_message_users + 1
                    bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ' + str(
                        colvo_send_message_users) + '\n–ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ' + str(colvo_dont_send_message_users))


def add_money2(message):
    if message.text != '–û—Ç–º–µ–Ω–∞':
        connection = connect(host=config.bd_host, user=config.bd_login, password=config.bd_pass,
                             database=config.bd_base)
        q = connection.cursor()
        q.execute(
            f"update ugc_users set balance = '{message.text}' where id = '{id_user_edit_bal1}'")
        connection.commit()
        q.execute("select ref from ugc_users where id = " +
                  str(id_user_edit_bal1))
        ref_user1 = q.fetchone()[0]
        if ref_user1 != None:
            add_deposit = int(message.text) / 100 * 25
            q.execute("update ugc_users set balance = balance + " +
                      str(add_deposit) + " where id =" + str(ref_user1))
            connection.commit()
            try:
                bot.send_message(ref_user1, f'–†–µ—Ñ–µ—Ä–∞–ª –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –∏ –≤–∞–º –∑–∞—á–∏—Å–ª–∏–Ω–Ω–æ {add_deposit} RUB',
                                 parse_mode='HTML')
            except Exception as e:
                pass
        bot.send_message(
            message.chat.id, '–£—Å–ø–µ—à–Ω–æ!  | /admin', parse_mode='HTML')
    else:
        bot.send_message(
            message.chat.id, '–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω–∫—É | /admin', parse_mode='HTML')


def searchuser(message):
    if message.text.lower() != '–æ—Ç–º–µ–Ω–∞':
        connection = connect(host=config.bd_host, user=config.bd_login, password=config.bd_pass,
                             database=config.bd_base)
        q = connection.cursor()
        q.execute(f"SELECT * FROM ugc_users where id = '{message.text}'")
        row = q.fetchone()
        bot.send_message(message.chat.id, '<b>üîç –ò—â–µ–º...</b>',
                         parse_mode='HTML', reply_markup=keyboards.main)
        if row != None:
            q.execute(f"SELECT COUNT(id) FROM akk where user = '{row[0]}'")
            saasssss = q.fetchone()[0]
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton(
                text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data=f'–¥–æ–±–∞–≤–∏—Ç—å–±–∞–ª–∞–Ω—Å_{row[0]}'))
            msg = bot.send_message(message.chat.id, f'''<b>–ü–æ–¥—Ä–æ–±–Ω–µ–µ:</b>
<b>–ò–¥:</b> <code>{row[0]}</code>
<b>–ë–∞–ª–∞–Ω—Å:</b> <code>{row[1]}</code>
<b>–ê–∫–∫–∞—É–Ω—Ç–æ–≤:</b> <code>{saasssss}</code>
<b>–ü–æ–¥–ø–∏—Å–∫–∞:</b> <code>{row[5]}</code>
''', parse_mode='HTML', reply_markup=keyboard)
        else:
            bot.send_message(
                message.chat.id, '<b>–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b> | /admin', parse_mode='HTML')
    else:
        bot.send_message(
            message.chat.id, '<b>–û—Ç–º–µ–Ω–∏–ª–∏</b> | /admin', parse_mode='HTML')


def delakks(message):
    if message.text.lower() != '–æ—Ç–º–µ–Ω–∞':
        connection = connect(host=config.bd_host, user=config.bd_login, password=config.bd_pass,
                             database=config.bd_base)
        q = connection.cursor()
        q.execute(f"DELETE FROM list_chat where akk = '{message.text}'")
        connection.commit()
        q.execute(f"DELETE FROM akk where id = '{message.text}'")
        connection.commit()
        bot.send_message(
            message.chat.id, f'''‚úîÔ∏è –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω | /admin''', parse_mode='HTML')
    else:
        bot.send_message(
            message.chat.id, '<b>–û—Ç–º–µ–Ω–∏–ª–∏</b> | /admin', parse_mode='HTML')


def searchchat(message):
    if message.text.lower() != '–æ—Ç–º–µ–Ω–∞':
        bot.send_message(message.chat.id, '<b>üîç –ò—â–µ–º...</b>',
                         parse_mode='HTML', reply_markup=keyboards.main)
        connection = connect(host=config.bd_host, user=config.bd_login, password=config.bd_pass,
                             database=config.bd_base)
        q = connection.cursor()
        q.execute(f"SELECT data FROM ugc_users where id = '{message.chat.id}'")
        datas = q.fetchone()[0]
        if str(datas) != str('–ù–µ—Ç'):
            q.execute(
                f"update ugc_users set akk = '{message.text}' where id = '{message.chat.id}'")
            connection.commit()
            q.execute(
                f'SELECT akk FROM ugc_users where id =  "{message.chat.id}"')
            akk_akk = q.fetchone()[0]
            q.execute(f'SELECT proxi FROM akk where id =  "{akk_akk}"')
            proxi = q.fetchone()[0]
            keyboard = types.InlineKeyboardMarkup()
            q.execute(f"SELECT * FROM list_chat  where akk = '{akk_akk}'")
            rows = q.fetchall()
            btns = []
            for i in range(len(rows)):
                btns.append(types.InlineKeyboardButton(
                    text=rows[i][3], callback_data=f'servis_{rows[i][0]}'))
            while btns != []:
                try:
                    keyboard.add(
                        btns[0],
                        btns[1]
                    )
                    del btns[1], btns[0]
                except:
                    keyboard.add(btns[0])
                    del btns[0]

            keyboard.add(
                types.InlineKeyboardButton(text=f'''üîÑ  –ó–∞–≥—Ä—É–∑–∏—Ç—å —á–∞—Ç—ã —Å –∞–∫–∫–∞—É–Ω—Ç–∞''', callback_data=f'loading_akk'))
            keyboard.add(types.InlineKeyboardButton(text=f'''üåè –°–º–µ–Ω–∞ –ø—Ä–æ–∫—Å–∏''', callback_data=f'—Å–º–µ–Ω–∞–ø—Ä–æ–∫—Å–∏'),
                         types.InlineKeyboardButton(text=f'''üóë –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç''', callback_data=f'del_akk'))
            keyboard.add(types.InlineKeyboardButton(text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''', callback_data=f'akks'),
                         types.InlineKeyboardButton(text=f'''üìö Multi settings''', callback_data=f'Multi'))
            bot.send_message(
                message.chat.id, f'''üåê –ü—Ä–æ–∫—Å–∏: {proxi}''', parse_mode='HTML', reply_markup=keyboard)
        else:
            bot.send_message(
                message.chat.id, '<b>–û—à–∏–±–∫–∞</b> | /admin', parse_mode='HTML')
    else:
        bot.send_message(
            message.chat.id, '<b>–û—Ç–º–µ–Ω–∏–ª–∏</b> | /admin', parse_mode='HTML')


def add_proxi(message):
    if message.text != 'üéõ –ú–µ–Ω—é':
        try:
            proxi = message.text
            login_prox = proxi.split('@')[0].split(':')[0]
            pass_prox = proxi.split('@')[0].split(':')[1]
            ip_prox = proxi.split('@')[1].split(':')[0]
            port_prox = proxi.split('@')[1].split(':')[1]
            connection = connect(host=config.bd_host, user=config.bd_login, password=config.bd_pass,
                                 database=config.bd_base)
            q = connection.cursor()
            q.execute(
                f'SELECT akk FROM ugc_users where id =  "{message.chat.id}"')
            akkkkkkk = q.fetchone()[0]
            q.execute(
                f"update akk set proxi = '{proxi}' where id = '{akkkkkkk}'")
            connection.commit()
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton(
                text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''', callback_data=f'akks'))
            bot.send_message(message.chat.id, F'''‚úîÔ∏è –£—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–∏–ª–∏ –ø—Ä–æ–∫—Å–∏''', parse_mode='HTML',
                             reply_markup=keyboard)
        except Exception as e:
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton(
                text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''', callback_data=f'akks'))
            bot.send_message(message.chat.id, f'‚úñÔ∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞',
                             parse_mode='HTML', reply_markup=keyboard)
    else:
        keyboard.add(types.InlineKeyboardButton(
            text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''', callback_data=f'akks'))
        bot.send_message(
            message.chat.id, '‚úîÔ∏è –í–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é', reply_markup=keyboard)


def add_autotext(message):
    if message.text != 'üéõ –ú–µ–Ω—é':
        try:
            connection = connect(host=config.bd_host, user=config.bd_login, password=config.bd_pass,
                                 database=config.bd_base)
            q = connection.cursor()
            q.execute(
                f'SELECT akk FROM ugc_users where id =  "{message.chat.id}"')
            akkkkkkk = q.fetchone()[0]
            q.execute(
                f"update akk set text = '{message.text}' where id = '{akkkkkkk}'")
            connection.commit()
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton(
                text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''', callback_data=f'–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫'))
            bot.send_message(message.chat.id, F'''‚úîÔ∏è –£—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–∏–ª–∏''',
                             parse_mode='HTML', reply_markup=keyboard)
        except Exception as e:
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton(
                text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''', callback_data=f'–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫'))
            bot.send_message(message.chat.id, f'‚úñÔ∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞',
                             parse_mode='HTML', reply_markup=keyboard)
    else:
        keyboard.add(types.InlineKeyboardButton(
            text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''', callback_data=f'–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫'))
        bot.send_message(
            message.chat.id, '‚úîÔ∏è –í–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é', reply_markup=keyboard)


def proxis(id_akk):
    connection = connect(host=config.bd_host, user=config.bd_login,
                         password=config.bd_pass, database=config.bd_base)
    q = connection.cursor()
    q.execute(f'SELECT proxi FROM akk where id =  "{id_akk}"')
    proxi = q.fetchone()[0]
    return proxi


def generator_pw():
    pwd = string.digits
    return "".join(random.choice(pwd) for x in range(random.randint(16, 16)))


def btc_oplata_1(message):
    if message.text != '–û—Ç–º–µ–Ω–∞':
        try:
            if int(message.text) >= int(1):
                connection = connect(host=config.bd_host, user=config.bd_login, password=config.bd_pass,
                                     database=config.bd_base)
                q = connection.cursor()
                id_pay = generator_pw()
                invoice = wallet_p2p.create_invoice(value=int(message.text))
                url = invoice['payUrl']
                keyboard = types.InlineKeyboardMarkup()
                keyboard.add(types.InlineKeyboardButton(
                    text=f'''‚ÜóÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ ''', url=url))
                keyboard.add(types.InlineKeyboardButton(text=f'''‚úîÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É''',
                                                        callback_data=f"proverkaqiwi{invoice['billId']}"))
                keyboard.add(types.InlineKeyboardButton(
                    text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''', callback_data=f'profale'))
                bot.send_message(message.chat.id, '''‚ñ™Ô∏è  –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ —Å—á–µ—Ç —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º !

    üí° –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.''', reply_markup=keyboard)
            else:
                bot.send_message(message.chat.id, f'‚úñÔ∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –æ–ø–ª–∞—Ç—ã 2 RUB', parse_mode='HTML',
                                 reply_markup=keyboards.main)
        except Exception as e:
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton(
                text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''', callback_data=f'profale'))
            bot.send_message(message.chat.id, f'‚úñÔ∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –æ–ø–ª–∞—Ç—ã 2 RUB', parse_mode='HTML',
                             reply_markup=keyboard)

    else:
        bot.send_message(message.chat.id, '–í–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é',
                         reply_markup=keyboards.main)


@bot.callback_query_handler(func=lambda call: True)
def podcategors(call):
    if call.data == 'akks':
        bot.delete_message(chat_id=call.message.chat.id,
                           message_id=call.message.message_id)
        connection = connect(host=config.bd_host, user=config.bd_login, password=config.bd_pass,
                             database=config.bd_base)
        q = connection.cursor()
        q.execute(f"SELECT * FROM akk where user = '{call.message.chat.id}'")
        row = q.fetchall()
        keyboard = types.InlineKeyboardMarkup()
        for i in row:
            keyboard.add(types.InlineKeyboardButton(
                text=i[2], callback_data=f'—Å–ø–∏—Å–æ–∫{i[0]}'))
        keyboard.add(types.InlineKeyboardButton(
            text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç', callback_data=f'–¥–æ–±–∞–≤–∏—Ç—å–∞–∫–∫–∞—É–Ω—Ç'))
        keyboard.add(types.InlineKeyboardButton(
            text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''', callback_data=f'–ì–ª–∞–≤–Ω–æ–µ'))
        bot.send_message(call.from_user.id, f'''‚óæÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π:''', parse_mode='HTML',
                         reply_markup=keyboard)

    if call.data == '–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫':
        bot.delete_message(chat_id=call.message.chat.id,
                           message_id=call.message.message_id)
        connection = connect(host=config.bd_host, user=config.bd_login, password=config.bd_pass,
                             database=config.bd_base)
        q = connection.cursor()
        keyboard = types.InlineKeyboardMarkup()
        q.execute(f"SELECT * FROM akk where user = '{call.message.chat.id}'")
        row = q.fetchall()
        keyboard = types.InlineKeyboardMarkup()
        for i in row:
            keyboard.add(types.InlineKeyboardButton(
                text=i[2], callback_data=f'–∞–≤—Ç–æ–æ—Ç–≤–µ—Ç{i[0]}'))
        keyboard.add(types.InlineKeyboardButton(
            text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç', callback_data=f'–¥–æ–±–∞–≤–∏—Ç—å–∞–∫–∫–∞—É–Ω—Ç'))
        keyboard.add(types.InlineKeyboardButton(
            text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''', callback_data=f'–ì–ª–∞–≤–Ω–æ–µ'))
        bot.send_message(call.from_user.id, f'''‚óæÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π:''', parse_mode='HTML',
                         reply_markup=keyboard)

    if call.data[:12] == 'proverkaqiwi':
        billllid = call.data[12:]
        status = wallet_p2p.invoice_status(bill_id=billllid)
        if str(status['status']['value']) == str('PAID'):
            connection = connect(host=config.bd_host, user=config.bd_login, password=config.bd_pass,
                                 database=config.bd_base)
            q = connection.cursor()
            q.execute(
                f"update ugc_users set balance = balance + '{status['amount']['value']}' where id = '{call.from_user.id}'")
            connection.commit()
            bot.delete_message(chat_id=call.message.chat.id,
                               message_id=call.message.message_id)
            bot.send_message(call.from_user.id, f"‚úîÔ∏è –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {status['amount']['value']} RUB",
                             parse_mode='HTML')
            bot.send_message(config.admin,
                             f"–ë–∞–ª–∞–Ω—Å <a href='tg://user?id={call.message.chat.id}'>{call.message.chat.first_name}</a> –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {status['amount']['value']} RUB",
                             parse_mode="HTML")

        else:
            bot.answer_callback_query(
                callback_query_id=call.id, show_alert=True, text="–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    if call.data[:9] == '–∞–≤—Ç–æ–æ—Ç–≤–µ—Ç':
        bot.delete_message(chat_id=call.message.chat.id,
                           message_id=call.message.message_id)
        connection = connect(host=config.bd_host, user=config.bd_login, password=config.bd_pass,
                             database=config.bd_base)
        q = connection.cursor()
        q.execute(
            f"SELECT data FROM ugc_users where id = '{call.message.chat.id}'")
        datas = q.fetchone()[0]
        if str(datas) != str('–ù–µ—Ç'):

            q.execute(
                f"update ugc_users set akk = '{call.data[9:]}' where id = '{call.message.chat.id}'")
            connection.commit()

            q.execute(
                f'SELECT akk FROM ugc_users where id =  "{call.message.chat.id}"')
            akk_akk = q.fetchone()[0]

            q.execute(f'SELECT proxi FROM akk where id =  "{akk_akk}"')
            proxi = q.fetchone()[0]

            q.execute(f'SELECT auto FROM akk where id =  "{akk_akk}"')
            status_auto = q.fetchone()[0]

            q.execute(f'SELECT text FROM akk where id =  "{akk_akk}"')
            text_auto = q.fetchone()[0]
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton(text=f'''üí¨ –°–º–µ–Ω–∞ —Ç–µ–∫—Å—Ç–∞''', callback_data=f'—Ç–µ–∫—Å—Ç–∞'),
                         types.InlineKeyboardButton(text=f'''üí°–í–∫–ª/–í—ã–∫–ª –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫''',
                                                    callback_data=f'–≤–∫–ª–∞–≤—Ç–æ–æ–æ—Ç–≤–µ—Ç—á–∏–∫'))
            keyboard.add(types.InlineKeyboardButton(text=f'''üåè –°–º–µ–Ω–∞ –ø—Ä–æ–∫—Å–∏''', callback_data=f'—Å–º–µ–Ω–∞–ø—Ä–æ–∫—Å–∏'),
                         types.InlineKeyboardButton(text=f'''üóë –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç''', callback_data=f'del_akk'))
            keyboard.add(types.InlineKeyboardButton(
                text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''', callback_data=f'akks'))
            bot.send_message(call.message.chat.id, f'''‚ñ™Ô∏è –ü—Ä–æ–∫—Å–∏: {proxi}
    ‚ñ™Ô∏è –¢–µ–∫—Å—Ç –∞–≤—Ç–æ–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞: {text_auto}
    ‚ñ™Ô∏è –°—Ç–∞—Ç—É—Å: {status_auto}''', parse_mode='HTML', reply_markup=keyboard)
        else:
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton(
                text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''', callback_data=f'akks'), )
            bot.send_message(call.message.chat.id, f'''‚úñÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç''', parse_mode='HTML',
                             reply_markup=keyboard)

    if call.data == '—Ç–µ–∫—Å—Ç–∞':
        msg = bot.send_message(call.message.chat.id, '‚ÑπÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞:', parse_mode='HTML',
                               reply_markup=keyboards.main)
        bot.register_next_step_handler(msg, add_autotext)

    if call.data == 'ref':
        bot.delete_message(chat_id=call.message.chat.id,
                           message_id=call.message.message_id)
        connection = connect(host=config.bd_host, user=config.bd_login, password=config.bd_pass,
                             database=config.bd_base)
        q = connection.cursor()

        q.execute(
            f"SELECT ref_colvo FROM ugc_users where id = '{call.message.chat.id}'")
        colvo_ref = q.fetchone()[0]

        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(
            text=f'''ü•á–¢–æ–ø –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤''', callback_data=f'top_ref'))
        keyboard.add(types.InlineKeyboardButton(
            text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''', callback_data=f'profale'))
        bot.send_message(call.message.chat.id, f'''üó£ –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞

üí∏ –ß—Ç–æ–±—ã –ø–∞—Å—Å–∏–≤–Ω–æ –∫–∞–ø–∞–ª–∏ –¥–µ–Ω—å–≥–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å, –º–Ω–æ–≥–æ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ. –ó–æ–≤–∏ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π —Å –Ω–∏—Ö –º–æ–Ω–µ—Ç—Éüòâ

üìà –£ –≤–∞—Å: {colvo_ref} —Ä–µ—Ñ–µ—Ä–∞–ª(–æ–≤).

üåê –°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: https://t.me/{config.bot_osnova_name}?start={call.message.chat.id}

‚ùóÔ∏è–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 25% —Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.

‚ö†Ô∏è –ó–∞–ø—Ä–µ—â–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º—É–ª—å—Ç–∏–∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å —Ü–µ–ª—å—é –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏—Ö –≤—ã–ø–ª–∞—Ç, —Ç.–µ. –Ω–µ–ª—å–∑—è –±—ã—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º —Å–∞–º–æ–º—É —Å–µ–±–µ.''',
                         reply_markup=keyboard, disable_web_page_preview=True)

    if call.data == '–≤–∫–ª–∞–≤—Ç–æ–æ–æ—Ç–≤–µ—Ç—á–∏–∫':
        bot.delete_message(chat_id=call.message.chat.id,
                           message_id=call.message.message_id)
        connection = connect(host=config.bd_host, user=config.bd_login, password=config.bd_pass,
                             database=config.bd_base)
        q = connection.cursor()

        q.execute(
            f'SELECT akk FROM ugc_users where id =  "{call.message.chat.id}"')
        akk_akk = q.fetchone()[0]

        q.execute(f'SELECT auto FROM akk where id =  "{akk_akk}"')
        status_auto = q.fetchone()[0]
        if str(status_auto) == str('–í—ã–∫–ª—é—á–µ–Ω'):
            q.execute(
                f"update akk set auto = '–†–∞–±–æ—Ç–∞–µ—Ç' where id = '{akk_akk}'")
            connection.commit()
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton(
                text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''', callback_data=f'–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫'))
            bot.send_message(call.message.chat.id, F'''‚úîÔ∏è –£—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–∏–ª–∏''',
                             parse_mode='HTML', reply_markup=keyboard)
        else:
            q.execute(
                f"update akk set auto = '–í—ã–∫–ª—é—á–µ–Ω' where id = '{akk_akk}'")
            connection.commit()
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton(
                text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''', callback_data=f'–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫'))
            bot.send_message(call.message.chat.id, F'''‚úîÔ∏è –£—Å–ø–µ—à–Ω–æ –≤—ã–∫–ª—é—á–∏–ª–∏''', parse_mode='HTML',
                             reply_markup=keyboard)

    if call.data == 'timeupdate':
        bot.send_message(call.from_user.id, 'Load', parse_mode='HTML')
        connection = connect(host=config.bd_host, user=config.bd_login, password=config.bd_pass,
                             database=config.bd_base)
        q = connection.cursor()
        clock_in_half_hour = datetime.now()
        q.execute(f"SELECT * FROM list_chat where time >= '1'")
        row = q.fetchall()
        for i in row:
            ttt = datetime.now() + timedelta(minutes=(int(i[4])))
            q.execute(
                f"update list_chat set time_step = '{ttt.hour}:{ttt.minute}' where id_str = '{i[0]}'")
            connection.commit()

        bot.send_message(call.from_user.id,
                         f'''‚úîÔ∏è Time update /admin''', parse_mode='HTML')

    if call.data == 'restartsssss':
        bot.send_message(call.message.chat.id,
                         '<b>–ù–∞—á–∏–Ω–∞–µ–º...</b>', parse_mode='HTML')
        cmd = 'systemctl restart avp'
        cmd1 = 'systemctl restart avp_autos'
        cmd2 = 'systemctl restart avp_bot_auch'
        cmd3 = 'systemctl restart avp_ids_spam'
        cmd4 = 'systemctl restart avp_send_1'
        subprocess.Popen(cmd3, shell=True)
        subprocess.Popen(cmd1, shell=True)
        subprocess.Popen(cmd2, shell=True)
        subprocess.Popen(cmd4, shell=True)
        subprocess.Popen(cmd, shell=True)

    if call.data[:6] == '—Å–ø–∏—Å–æ–∫':
        bot.delete_message(chat_id=call.message.chat.id,
                           message_id=call.message.message_id)
        connection = connect(host=config.bd_host, user=config.bd_login, password=config.bd_pass,
                             database=config.bd_base)
        q = connection.cursor()
        q.execute(
            f"SELECT data FROM ugc_users where id = '{call.message.chat.id}'")
        datas = q.fetchone()[0]
        if str(datas) != str('–ù–µ—Ç'):

            q.execute(
                f"update ugc_users set akk = '{call.data[6:]}' where id = '{call.message.chat.id}'")
            connection.commit()

            print(call.data[6:])

            q.execute(
                f'SELECT akk FROM ugc_users where id =  "{call.message.chat.id}"')
            akk_akk = q.fetchone()[0]
            print(akk_akk)

            q.execute(f'SELECT proxi FROM akk where id =  "{akk_akk}"')
            proxi = q.fetchone()[0]

            keyboard = types.InlineKeyboardMarkup()

            q.execute(f"SELECT * FROM list_chat  where akk = '{akk_akk}'")
            rows = q.fetchall()

            btns = []
            for i in range(len(rows)):
                btns.append(types.InlineKeyboardButton(
                    text=rows[i][3], callback_data=f'servis_{rows[i][0]}'))
            while btns != []:
                try:
                    keyboard.add(
                        btns[0],
                        btns[1]
                    )
                    del btns[1], btns[0]
                except:
                    keyboard.add(btns[0])
                    del btns[0]

            keyboard.add(
                types.InlineKeyboardButton(text=f'''üîÑ  –ó–∞–≥—Ä—É–∑–∏—Ç—å —á–∞—Ç—ã —Å –∞–∫–∫–∞—É–Ω—Ç–∞''', callback_data=f'loading_akk'))
            keyboard.add(types.InlineKeyboardButton(text=f'''üåè –°–º–µ–Ω–∞ –ø—Ä–æ–∫—Å–∏''', callback_data=f'—Å–º–µ–Ω–∞–ø—Ä–æ–∫—Å–∏'),
                         types.InlineKeyboardButton(text=f'''üóë –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç''', callback_data=f'del_akk'))
            keyboard.add(types.InlineKeyboardButton(text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''', callback_data=f'akks'),
                         types.InlineKeyboardButton(text=f'''üìö Multi settings''', callback_data=f'Multi'))
            bot.send_message(
                call.message.chat.id, f'''üåê –ü—Ä–æ–∫—Å–∏: {proxi}''', parse_mode='HTML', reply_markup=keyboard)
        else:
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton(
                text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''', callback_data=f'akks'), )
            bot.send_message(call.message.chat.id, f'''‚úñÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç''', parse_mode='HTML',
                             reply_markup=keyboard)

    if call.data == 'loading_akk':
        bot.delete_message(chat_id=call.message.chat.id,
                           message_id=call.message.message_id)
        bot.send_message(
            call.message.chat.id, f'üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–∂–∏–¥–∞–π—Ç–µ.', reply_markup=keyboards.main)
        connection = connect(host=config.bd_host, user=config.bd_login, password=config.bd_pass,
                             database=config.bd_base)
        q = connection.cursor()
        q.execute(
            f'SELECT akk FROM ugc_users where id =  "{call.message.chat.id}"')
        akk_akk = q.fetchone()[0]
        www = chat_list.mainssssss(akk_akk, call.message.chat.id)
        if str(www) == str('ok'):
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton(
                text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''', callback_data=f'akks'))
            bot.send_message(call.message.chat.id, f'''‚úîÔ∏è –ß–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã.

‚ö†Ô∏è –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ —É –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω –±–æ—Ç: @{config.bot_logi_name}''', reply_markup=keyboard)
        else:
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton(
                text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''', callback_data=f'akks'))
            bot.send_message(call.message.chat.id,
                             f'‚úñÔ∏è –û—à–∏–±–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞.', reply_markup=keyboard)

    if call.data == '—Å–º–µ–Ω–∞–ø—Ä–æ–∫—Å–∏':
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton(
                text=f'''üìú –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è''', url='https://telegra.ph/Dobavlyaem-proksi-06-28'),
            types.InlineKeyboardButton(text=f'''‚ûï –ö—É–ø–∏—Ç—å –ø—Ä–æ–∫—Å–∏''', url='https://www.proxy.house/?r=65634'))
        msg = bot.send_message(call.message.chat.id, '‚ÑπÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–∫—Å–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: login:password@ip:port (SOCKS)',
                               parse_mode='HTML', reply_markup=keyboard)
        bot.register_next_step_handler(msg, add_proxi)

    if call.data == 'del_akk':
        bot.delete_message(chat_id=call.message.chat.id,
                           message_id=call.message.message_id)
        connection = connect(host=config.bd_host, user=config.bd_login, password=config.bd_pass,
                             database=config.bd_base)
        q = connection.cursor()
        q.execute(
            f'SELECT akk FROM ugc_users where id =  "{call.message.chat.id}"')
        akk_akkass = q.fetchone()[0]
        q.execute(f"DELETE FROM list_chat where akk = '{akk_akkass}'")
        connection.commit()
        q.execute(f"DELETE FROM akk where id = '{akk_akkass}'")
        connection.commit()
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(
            text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''', callback_data=f'akks'))
        bot.send_message(call.from_user.id, f'''‚úîÔ∏è –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω''',
                         parse_mode='HTML', reply_markup=keyboard)

    if call.data == '–¥–æ–±–∞–≤–∏—Ç—å–∞–∫–∫–∞—É–Ω—Ç':
        bot.delete_message(chat_id=call.message.chat.id,
                           message_id=call.message.message_id)
        connection = connect(host=config.bd_host, user=config.bd_login, password=config.bd_pass,
                             database=config.bd_base)
        q = connection.cursor()
        q.execute(
            f"SELECT data FROM ugc_users where id = '{call.message.chat.id}'")
        datas = q.fetchone()[0]
        if str(datas) != str('–ù–µ—Ç'):
            code = call.message.chat.id
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton(text=f'''üåê –ü–µ—Ä–µ–π—Ç–∏''',
                                                    url=f'https://t.me/{config.bot_auch_name}?start={code}'))
            keyboard.add(types.InlineKeyboardButton(
                text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''', callback_data=f'akks'))
            bot.send_message(call.message.chat.id,
                             f'''‚ÑπÔ∏è –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –±–æ—Ç  <a href="https://t.me/{config.bot_auch_name}?start={code}">—Å—Å—ã–ª–∫–µ</a> –∏ –ø—Ä–æ–π–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å–ª–µ–¥—É–π—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.''',
                             parse_mode='HTML', reply_markup=keyboard)
        else:
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton(
                text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''', callback_data=f'akks'))
            bot.send_message(call.from_user.id, f'''‚úñÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏''',
                             parse_mode='HTML', reply_markup=keyboard)

    if call.data[:7] == 'servis_':
        connection = connect(host=config.bd_host, user=config.bd_login, password=config.bd_pass,
                             database=config.bd_base)
        q = connection.cursor()
        bot.delete_message(chat_id=call.message.chat.id,
                           message_id=call.message.message_id)
        q.execute(
            f"update ugc_users set chat = '{call.data[7:]}' where id = '{call.message.chat.id}'")
        connection.commit()
        q.execute(
            f'SELECT chat FROM ugc_users where id =  "{call.message.chat.id}"')
        chat_chat = q.fetchone()[0]
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text='–°–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç', callback_data=f'–Ω–∞—Å—Ç—Ä–æ–π–∫–∞{1}'),
                     types.InlineKeyboardButton(text='–°–º–µ–Ω–∏—Ç—å –¥–æ–ø —Ç–µ–∫—Å—Ç', callback_data=f'–Ω–∞—Å—Ç—Ä–æ–π–∫–∞{6}'))
        keyboard.add(types.InlineKeyboardButton(text='–°–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ', callback_data=f'–Ω–∞—Å—Ç—Ä–æ–π–∫–∞{4}'),
                     types.InlineKeyboardButton(text='–°–º–µ–Ω–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É', callback_data=f'–Ω–∞—Å—Ç—Ä–æ–π–∫–∞{2}'))
        q.execute(f"SELECT * FROM list_chat where id_str = '{chat_chat}'")
        row = q.fetchone()
        try:
            keyboard.add(types.InlineKeyboardButton(
                text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å', callback_data=f'–û—Ç–ø—Ä–∞–≤–∏—Ç—å{chat_chat}'))
            keyboard.add(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data=f'akks'),
                         types.InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å', callback_data=f'–Ω–∞—Å—Ç—Ä–æ–π–∫–∞{3}'))
            bot.send_message(call.from_user.id, f'''‚ñ™Ô∏è Id: <code>{row[1]}</code>
‚ñ™Ô∏è –¢–µ–∫—Å—Ç: {row[2]}
‚ñ™Ô∏è –î–æ–ø —Ç–µ–∫—Å—Ç: {row[11]}
‚ñ™Ô∏è –ö–∞—Ä—Ç–∏–Ω–∫–∞: <code>{row[6]}</code> (—Å—Å—ã–ª–∫–∞)
‚ñ™Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞: <code>{row[4]}</code> –º–∏–Ω—É—Ç
‚ñ™Ô∏è –û—Ç–ø—Ä–∞–≤–∫–∞: <code>{row[5]}</code>''', parse_mode='HTML', reply_markup=keyboard)
        except Exception as e:
            bot.send_message(call.from_user.id, f'''‚ñ™Ô∏è Id: <code>{row[1]}</code>
‚ñ™Ô∏è –¢–µ–∫—Å—Ç: –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞
‚ñ™Ô∏è –î–æ–ø —Ç–µ–∫—Å—Ç: –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞
‚ñ™Ô∏è –ö–∞—Ä—Ç–∏–Ω–∫–∞: <code>{row[6]}</code> (—Å—Å—ã–ª–∫–∞)
‚ñ™Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞: <code>{row[4]}</code> –º–∏–Ω—É—Ç
‚ñ™Ô∏è –û—Ç–ø—Ä–∞–≤–∫–∞: <code>{row[5]}</code>''', parse_mode='HTML', reply_markup=keyboard)
        clock_in_half_hour = datetime.now()
        bot.send_message(call.from_user.id, f'''
‚ñ™Ô∏è –¢–µ–∫—É—â–∏–µ –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: <code>{clock_in_half_hour}</code>''', parse_mode='HTML', reply_markup=keyboards.main)

    if call.data[:9] == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å':
        connection = connect(host=config.bd_host, user=config.bd_login, password=config.bd_pass,
                             database=config.bd_base)
        q = connection.cursor()
        q.execute(
            f"update list_chat set status = 'Send' where id_str = '{call.data[9:]}'")
        connection.commit()
        bot.answer_callback_query(callback_query_id=call.id, show_alert=True,
                                  text="–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å –∏ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–π –º–∏–Ω—É—Ç—ã !")

    if call.data == 'send_sms_bot':
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(
            text='–° –∫–∞—Ä—Ç–∏–Ω–æ–∫–π', callback_data=f'–†–∞—Å—Å—ã–ª–∫–∞{1}'))
        keyboard.add(types.InlineKeyboardButton(
            text='–° –≥–∏—Ñ', callback_data=f'–†–∞—Å—Å—ã–ª–∫–∞{2}'))
        keyboard.add(types.InlineKeyboardButton(
            text='–° –≤–∏–¥–µ–æ', callback_data=f'–†–∞—Å—Å—ã–ª–∫–∞{3}'))
        bot.send_message(call.from_user.id, f'''–∫–∞–∫ –±—É–¥–µ–º —Ä–∞—Å—Å—ã–ª–∫–∞—Ç—å ?''',
                         parse_mode='HTML', reply_markup=keyboard)

    if call.data[:8] == '–†–∞—Å—Å—ã–ª–∫–∞':
        global tipsendSSSSS
        tipsendSSSSS = call.data[8:]
        msg = bot.send_message(
            call.message.chat.id, "<b>–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏</b>", parse_mode='HTML')
        bot.register_next_step_handler(msg, send_photoorno)

    if call.data == 'Multi':
        bot.delete_message(chat_id=call.message.chat.id,
                           message_id=call.message.message_id)
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(
            text='–°–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç', callback_data=f'–º—É–ª—å—Ç–∏{1}'))
        keyboard.add(types.InlineKeyboardButton(
            text='–°–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ', callback_data=f'–º—É–ª—å—Ç–∏{4}'))
        keyboard.add(types.InlineKeyboardButton(
            text='–°–º–µ–Ω–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É', callback_data=f'–º—É–ª—å—Ç–∏{3}'))
        keyboard.add(types.InlineKeyboardButton(
            text='–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç—ã', callback_data=f'–º—É–ª—å—Ç–∏{5}'))
        keyboard.add(types.InlineKeyboardButton(
            text='–ù–∞–∑–∞–¥', callback_data=f'akks'))
        bot.send_message(call.from_user.id, f'''‚ñ™Ô∏è–°–º–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –≤—Å–µ–º —á–∞—Ç–∞–º –∞–∫–∫–∞—É–Ω—Ç–∞:''', parse_mode='HTML',
                         reply_markup=keyboard)

    if call.data[:6] == '–º—É–ª—å—Ç–∏':
        bot.delete_message(chat_id=call.message.chat.id,
                           message_id=call.message.message_id)
        global tipsend11
        tipsend11 = call.data[6:]
        if int(tipsend11) == 1:
            msg = bot.send_message(
                call.message.chat.id, "<b>–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:</b>", parse_mode='HTML')
            bot.register_next_step_handler(msg, new_data_m)

        if int(tipsend11) == 4:
            msg = bot.send_message(
                call.message.chat.id, "<b>–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:</b>", parse_mode='HTML')
            bot.register_next_step_handler(msg, new_data_m)

        if int(tipsend11) == 3:
            msg = bot.send_message(
                call.message.chat.id, "<b>–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:</b>", parse_mode='HTML')
            bot.register_next_step_handler(msg, new_data_m)

        if int(tipsend11) == 5:
            msg = bot.send_message(call.message.chat.id, "<b>–í–≤–µ–¥–∏ —Å—Ç–∞—Ä—ã–π –Ω–æ–º–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –Ω–æ–≤—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:</b>",
                                   parse_mode='HTML')
            bot.register_next_step_handler(msg, new_data_m)

    elif call.data[:9] == '–Ω–∞—Å—Ç—Ä–æ–π–∫–∞':
        bot.delete_message(chat_id=call.message.chat.id,
                           message_id=call.message.message_id)
        global tipsend
        tipsend = call.data[9:]
        print(tipsend)
        connection = connect(host=config.bd_host, user=config.bd_login, password=config.bd_pass,
                             database=config.bd_base)
        q = connection.cursor()
        if int(tipsend) == 1:
            msg = bot.send_message(call.message.chat.id,
                                   "–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: (–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç —Ä–∞–∑–º–µ—Ç–∫–∏ 'html') | –ù–µ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –≤ —Ç–µ–∫—Å—Ç–µ –∑–Ω–∞–∫–∏ ' ",
                                   parse_mode='HTML')
            bot.register_next_step_handler(msg, new_data)
        if int(tipsend) == 2:
            msg = bot.send_message(
                call.message.chat.id, "<b>–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:</b>", parse_mode='HTML')
            bot.register_next_step_handler(msg, new_data)
        if int(tipsend) == 3:
            q.execute(
                f'SELECT chat FROM ugc_users where id =  "{call.message.chat.id}"')
            chat_chat = q.fetchone()[0]
            q.execute(f"DELETE FROM list_chat where id_str = '{chat_chat}'")
            connection.commit()
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton(
                text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''', callback_data=f'akks'))
            bot.send_message(call.from_user.id, '''‚úîÔ∏è –ì–æ—Ç–æ–≤–æ''',
                             parse_mode='HTML', reply_markup=keyboard)
        if int(tipsend) == 4:
            msg = bot.send_message(
                call.message.chat.id, "<b>–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ:</b>", parse_mode='HTML')
            bot.register_next_step_handler(msg, new_data)
        if int(tipsend) == 5:
            keyboard = types.InlineKeyboardMarkup()
            q.execute(
                f'SELECT akk FROM ugc_users where id =  "{call.message.chat.id}"')
            akk_akk = q.fetchone()[0]

            keyboard = types.InlineKeyboardMarkup()
            q.execute(f"SELECT * FROM list_chat  where akk = '{akk_akk}'")
            rows = q.fetchall()
            btns = []
            for i in range(len(rows)):
                btns.append(types.InlineKeyboardButton(
                    text=rows[i][3], callback_data=f'servis_{rows[i][0]}'))

            while btns != []:
                try:
                    keyboard.add(
                        btns[0],
                        btns[1]
                    )

                    del btns[1], btns[0]

                except:
                    keyboard.add(btns[0])
                    del btns[0]
            clock_in_half_hour = datetime.now()
            keyboard.add(
                types.InlineKeyboardButton(text=f'''üîÑ  –ó–∞–≥—Ä—É–∑–∏—Ç—å —á–∞—Ç—ã —Å –∞–∫–∫–∞—É–Ω—Ç–∞''', callback_data=f'loading_akk'))
            keyboard.add(types.InlineKeyboardButton(text=f'''üåè –°–º–µ–Ω–∞ –ø—Ä–æ–∫—Å–∏''', callback_data=f'—Å–º–µ–Ω–∞–ø—Ä–æ–∫—Å–∏'),
                         types.InlineKeyboardButton(text=f'''üóë –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç''', callback_data=f'del_akk'))
            keyboard.add(types.InlineKeyboardButton(text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''', callback_data=f'akks'),
                         types.InlineKeyboardButton(text=f'''üìö Multi settings''', callback_data=f'Multi'))
        if int(tipsend) == 6:
            msg = bot.send_message(
                call.message.chat.id, "<b>–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:</b>", parse_mode='HTML')
            bot.register_next_step_handler(msg, new_data)

    elif call.data == '–ì–ª–∞–≤–Ω–æ–µ':
        bot.delete_message(chat_id=call.message.chat.id,
                           message_id=call.message.message_id)
        keyboard = types.InlineKeyboardMarkup()
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text=f'''‚è≥ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥''', callback_data=f'akks'),
                     types.InlineKeyboardButton(text=f'''üí¨ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫''', callback_data=f'–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫'))
        keyboard.add(types.InlineKeyboardButton(text=f'''üñ• –ü—Ä–æ—Ñ–∏–ª—å''', callback_data=f'profale'),
                     types.InlineKeyboardButton(text=f'''üìñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è''', callback_data=f'info'))
        bot.send_message(call.message.chat.id, f'''‚óæÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é:''', parse_mode='HTML',
                         reply_markup=keyboard)

    elif call.data == 'profale':
        bot.delete_message(chat_id=call.message.chat.id,
                           message_id=call.message.message_id)
        connection = connect(host=config.bd_host, user=config.bd_login, password=config.bd_pass,
                             database=config.bd_base)
        q = connection.cursor()

        q.execute(
            f"SELECT balance FROM ugc_users where id = '{call.message.chat.id}'")
        balans = q.fetchone()[0]

        q.execute(
            f"SELECT data FROM ugc_users where id = '{call.message.chat.id}'")
        data = q.fetchone()[0]

        q.execute(
            f"SELECT COUNT(id) FROM akk where user = '{call.message.chat.id}'")
        akss_id = q.fetchone()[0]

        q.execute(
            f'SELECT SUM(colvo_send) FROM list_chat where id_user = "{call.message.chat.id}"')
        colvo_sends = q.fetchone()[0]

        q.execute(
            f'SELECT COUNT(id) FROM list_chat where id_user = "{call.message.chat.id}"')
        chats = q.fetchone()[0]
        if chats == None:
            chats = 0
        if akss_id == None:
            akss_id = 0
        if colvo_sends == None:
            colvo_sends = 0
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text=f'''üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å''', callback_data='–ü–æ–ø–æ–ª–Ω–∏—Ç—å'),
                     types.InlineKeyboardButton(text=f'''üîì –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É''', callback_data='–û—Ñ–æ—Ä–º–∏—Ç—å'))
        keyboard.add(types.InlineKeyboardButton(
            text=f'''üó£ –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞''', callback_data='ref'))
        keyboard.add(types.InlineKeyboardButton(
            text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''', callback_data=f'–ì–ª–∞–≤–Ω–æ–µ'))
        bot.send_message(call.message.chat.id, f'''
‚ñ™Ô∏è id: <code>{call.message.chat.id}</code>
‚ñ™Ô∏è –ë–∞–ª–∞–Ω—Å: <code>{balans}</code> RUB
‚ñ™Ô∏è –ê–∫–∫–∞—É–Ω—Ç–æ–≤: <code>{akss_id}</code>
‚ñ™Ô∏è –ß–∞—Ç–æ–≤: <code>{chats}</code>
‚ñ™Ô∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ: <code>{colvo_sends}</code>
‚ñ™Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: <code>{data}</code>
''', parse_mode='HTML', reply_markup=keyboard)

    elif call.data == '–ü–æ–ø–æ–ª–Ω–∏—Ç—å':
        bot.delete_message(chat_id=call.message.chat.id,
                           message_id=call.message.message_id)
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton(text=f'''‚ñ™Ô∏è QIWI / CARD / YA  / PM / BTC / LTC''', callback_data='add_depozit'))
        keyboard.add(types.InlineKeyboardButton(
            text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''', callback_data=f'profale'))
        bot.send_message(call.message.chat.id, f'''‚ñ™Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞:''', parse_mode='HTML',
                         reply_markup=keyboard)

    elif call.data == 'add_depozit':
        bot.delete_message(chat_id=call.message.chat.id,
                           message_id=call.message.message_id)
        msg = bot.send_message(call.message.chat.id, '''‚ÑπÔ∏è –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:''', reply_markup=keyboards.main,
                               parse_mode='HTML')
        bot.register_next_step_handler(msg, btc_oplata_1)

    elif call.data == '–û—Ñ–æ—Ä–º–∏—Ç—å':
        bot.delete_message(chat_id=call.message.chat.id,
                           message_id=call.message.message_id)
        connection = connect(host=config.bd_host, user=config.bd_login, password=config.bd_pass,
                             database=config.bd_base)
        q = connection.cursor()
        q.execute(f'SELECT * FROM config where id =  "1"')
        prace = q.fetchone()
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(
            text=f'''‚óæÔ∏è –ù–µ–¥–µ–ª—è {prace[1]}—Ä''', callback_data=f'–ø–æ–¥–ø–∏—Å–∫–∞1'))
        keyboard.add(types.InlineKeyboardButton(
            text=f'''‚óæÔ∏è 1 –º–µ—Å—è—Ü / {prace[2]}—Ä''', callback_data=f'–ø–æ–¥–ø–∏—Å–∫–∞2'))
        keyboard.add(types.InlineKeyboardButton(
            text=f'''‚óæÔ∏è 3 –º–µ—Å—è—Ü / {prace[3]}—Ä''', callback_data=f'–ø–æ–¥–ø–∏—Å–∫–∞3'))
        keyboard.add(types.InlineKeyboardButton(
            text=f'''‚óæÔ∏è –ë–µ–∑–ª–∏–º–∏—Ç / {prace[4]}—Ä''', callback_data=f'–ø–æ–¥–ø–∏—Å–∫–∞4'))
        keyboard.add(types.InlineKeyboardButton(
            text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''', callback_data=f'–ì–ª–∞–≤–Ω–æ–µ'))
        bot.send_message(call.message.chat.id, '''‚óæÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É:''',
                         parse_mode='HTML', reply_markup=keyboard)

    elif call.data[:8] == '–ø–æ–¥–ø–∏—Å–∫–∞':
        bot.delete_message(chat_id=call.message.chat.id,
                           message_id=call.message.message_id)
        temp_id = call.data[8:]
        connection = connect(host=config.bd_host, user=config.bd_login, password=config.bd_pass,
                             database=config.bd_base)
        q = connection.cursor()
        q.execute(f'SELECT * FROM config where id =  "1"')
        prace = q.fetchone()
        q.execute(
            f"SELECT balance FROM ugc_users where id = '{call.from_user.id}'")
        bal_us = q.fetchone()[0]
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(
            text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''', callback_data=f'–ì–ª–∞–≤–Ω–æ–µ'))
        if str(temp_id) == '1':
            if int(bal_us) >= int(prace[1]):
                q.execute("update ugc_users set balance = balance - " + str(prace[1]) + " where id = " + str(
                    call.from_user.id))
                connection.commit()
                tomorrow = datetime.now() + timedelta(days=7)
                tomorrow_formatted = tomorrow.strftime('%d/%m/%Y')
                print(tomorrow_formatted)
                q.execute(
                    f"update ugc_users set data = '{tomorrow_formatted}' where id = '{call.from_user.id}'")
                connection.commit()
                bot.send_message(call.message.chat.id, '''‚úîÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞''', parse_mode='HTML',
                                 reply_markup=keyboard)
            else:
                bot.send_message(call.message.chat.id, '''‚úñÔ∏è –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å''', parse_mode='HTML',
                                 reply_markup=keyboard)

        if str(temp_id) == '2':
            if int(bal_us) >= int(prace[2]):
                q.execute("update ugc_users set balance = balance - " + str(prace[2]) + " where id = " + str(
                    call.from_user.id))
                connection.commit()
                tomorrow = datetime.now() + timedelta(days=30)
                tomorrow_formatted = tomorrow.strftime('%d/%m/%Y')
                q.execute(
                    f"update ugc_users set data = '{tomorrow_formatted}' where id = '{call.from_user.id}'")
                connection.commit()
                bot.send_message(call.message.chat.id, '''‚úîÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞''', parse_mode='HTML',
                                 reply_markup=keyboard)
            else:
                bot.send_message(call.message.chat.id, '''‚úñÔ∏è –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å''', parse_mode='HTML',
                                 reply_markup=keyboard)

        if str(temp_id) == '3':
            if int(bal_us) >= int(prace[3]):
                q.execute("update ugc_users set balance = balance - " + str(prace[3]) + " where id = " + str(
                    call.from_user.id))
                connection.commit()
                tomorrow = datetime.now() + timedelta(days=90)
                tomorrow_formatted = tomorrow.strftime('%d/%m/%Y')
                q.execute(
                    f"update ugc_users set data = '{tomorrow_formatted}' where id = '{call.from_user.id}'")
                connection.commit()
                bot.send_message(call.message.chat.id, '''‚úîÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞''', parse_mode='HTML',
                                 reply_markup=keyboard)
            else:
                bot.send_message(call.message.chat.id, '''‚úñÔ∏è –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å''', parse_mode='HTML',
                                 reply_markup=keyboard)

        if str(temp_id) == '4':
            if int(bal_us) >= int(prace[4]):
                q.execute("update ugc_users set balance = balance - " + str(prace[4]) + " where id = " + str(
                    call.from_user.id))
                connection.commit()
                tomorrow = datetime.now() + timedelta(days=999)
                tomorrow_formatted = tomorrow.strftime('%d/%m/%Y')
                q.execute(
                    f"update ugc_users set data = '{tomorrow_formatted}' where id = '{call.from_user.id}'")
                connection.commit()
                bot.send_message(call.message.chat.id, '''‚úîÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞''', parse_mode='HTML',
                                 reply_markup=keyboard)
            else:
                bot.send_message(call.message.chat.id, '''‚úñÔ∏è –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å''', parse_mode='HTML',
                                 reply_markup=keyboard)

    elif call.data == 'info':
        bot.delete_message(chat_id=call.message.chat.id,
                           message_id=call.message.message_id)
        connection = connect(host=config.bd_host, user=config.bd_login, password=config.bd_pass,
                             database=config.bd_base)
        q = connection.cursor()
        q.execute(f'SELECT COUNT(id) FROM akk')
        akkakk = q.fetchone()[0]

        q.execute(f'SELECT COUNT(id) FROM list_chat')
        chat = q.fetchone()[0]

        q.execute(f'SELECT SUM(colvo_send) FROM list_chat')
        colvo_send = q.fetchone()[0]

        q.execute(f'SELECT COUNT(id) FROM list_chat WHERE status = "Send"')
        chat_no_send = q.fetchone()[0]

        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text=f'''üí¢ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–µ—Ä–≤–∏—Å ?!''',
                                                url=f'https://telegra.ph/Informaciya-po-proektu-10-06'),
                     types.InlineKeyboardButton(text=f'''üßë‚Äçüîß –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å''', url=f'https://t.me/ADM_ROCKET'))
        keyboard.add(types.InlineKeyboardButton(
            text=f'''ü™ß –ë–∞–∑–∞ —á–∞—Ç–æ–≤''', callback_data=f'–ë–∞–∑–∞'))
        keyboard.add(types.InlineKeyboardButton(
            text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''', callback_data=f'–ì–ª–∞–≤–Ω–æ–µ'))
        bot.send_message(call.message.chat.id, f'''üìñ –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –±–æ—Ç—É:
‚ñ™Ô∏è https://telegra.ph/Informaciya-po-proektu-10-06

üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:
‚ñ™Ô∏è–ê–∫–∫–∞—É–Ω—Ç–æ–≤: {akkakk}
‚ñ™Ô∏è–ß–∞—Ç–æ–≤: {chat}
‚ñ™Ô∏è–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {colvo_send}
‚ñ™Ô∏è–û—á–µ—Ä–µ–¥—å –æ—Ç–ø—Ä–∞–≤–∫–∏: {chat_no_send}''', parse_mode='HTML', reply_markup=keyboard, disable_web_page_preview=True)

    elif call.data[:17] == 'admin_search_user':
        msg = bot.send_message(call.message.chat.id, f'<b>–í–≤–µ–¥–∏ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>', parse_mode='HTML',
                               reply_markup=keyboards.otmena)
        bot.register_next_step_handler(msg, searchuser)

    elif call.data[:17] == 'admin_search_chat':
        msg = bot.send_message(call.message.chat.id, f'<b>–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞</b>', parse_mode='HTML',
                               reply_markup=keyboards.otmena)
        bot.register_next_step_handler(msg, searchchat)

    elif call.data[:17] == 'del_akkss':
        msg = bot.send_message(call.message.chat.id, f'<b>–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è</b>', parse_mode='HTML',
                               reply_markup=keyboards.otmena)
        bot.register_next_step_handler(msg, delakks)

    elif call.data[:15] == '–¥–æ–±–∞–≤–∏—Ç—å–±–∞–ª–∞–Ω—Å_':
        global id_user_edit_bal1
        id_user_edit_bal1 = call.data[15:]
        msg = bot.send_message(call.message.chat.id,
                               '–í–≤–µ–¥–∏ —Å—É–º–º—É: ', parse_mode='HTML')
        bot.register_next_step_handler(msg, add_money2)

    if call.data == '–ë–∞–∑–∞':
        bot.delete_message(chat_id=call.message.chat.id,
                           message_id=call.message.message_id)
        connection = connect(host=config.bd_host, user=config.bd_login, password=config.bd_pass,
                             database=config.bd_base)
        q = connection.cursor()
        q.execute(
            f"SELECT data FROM ugc_users where id = '{call.message.chat.id}'")
        datas = q.fetchone()[0]
        if str(datas) != str('–ù–µ—Ç'):
            code = call.message.chat.id
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton(
                text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''', callback_data=f'info'))
            doc = open('chat.rar', 'rb')
            bot.send_document(call.message.chat.id, doc, caption='‚úîÔ∏è –°–ø–∞—Å–∏–±–æ –∑–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —á–∞—Ç–æ–≤.',
                              reply_markup=keyboard)
        else:
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton(
                text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''', callback_data=f'info'))
            bot.send_message(call.from_user.id,
                             f'''‚úñÔ∏è –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π –∏ –≤–ª—é—á–∞–µ—Ç –±–∞–∑—É –∏–∑ –±–æ–ª–µ–µ —á–µ–º 100,000 —á–∞—Ç–æ–≤ !''',
                             parse_mode='HTML', reply_markup=keyboard)

    elif call.data == '–∫–æ–Ω–∫—É—Ä—Å':
        bot.delete_message(chat_id=call.message.chat.id,
                           message_id=call.message.message_id)
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(
            text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''', callback_data=f'top_ref'))
        bot.send_message(call.message.chat.id, f'''üéÅ –ö–∞–∂–¥–æ–µ –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞, –º—ã –±—É–¥–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å –ø–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ —Ç–æ–ø 3 –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤.

‚ñ´Ô∏è –ó–∞ –Ω–∞–∫—Ä—É—Ç–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –≤—ã –±—É–¥–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤.''',
                         parse_mode='HTML', reply_markup=keyboard)

    elif call.data == 'top_ref':
        bot.delete_message(chat_id=call.message.chat.id,
                           message_id=call.message.message_id)
        connection = connect(host=config.bd_host, user=config.bd_login, password=config.bd_pass,
                             database=config.bd_base)
        q = connection.cursor()
        text = f"<b>üèÜ–¢–æ–ø –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤:\n\n</b>"
        q.execute(f'SELECT * FROM ugc_users ORDER BY ref_colvo DESC')
        rows = q.fetchall()
        premium = ['ü•á', 'ü•à', 'ü•â', 'üèÖ', 'üèÖ']
        l = len(rows)
        if l > 10:
            l = 10
        for i in range(l):
            if i <= len(premium) - 1:
                userid = int(rows[i][0])
                try:
                    UsrInfo = bot.get_chat_member(userid, userid).user
                    text += f"{premium[i]}{i + 1}) @{UsrInfo.username} | {rows[i][9]} —Ä–µ—Ñ–µ—Ä–∞–ª(–æ–≤)\n"
                except Exception as e:
                    text += f"{premium[i]}{i + 1}) @None | {rows[i][9]} —Ä–µ—Ñ–µ—Ä–∞–ª(–æ–≤)\n"
            else:
                try:
                    userid = int(rows[i][0])
                    UsrInfo = bot.get_chat_member(userid, userid).user
                    text += f"üéó{i + 1}) @{UsrInfo.username} | {rows[i][9]} —Ä–µ—Ñ–µ—Ä–∞–ª(–æ–≤)\n"
                except Exception as e:
                    text += f"üéó{i + 1}) @None | {rows[i][9]} —Ä–µ—Ñ–µ—Ä–∞–ª(–æ–≤)\n"
        keyboard = types.InlineKeyboardMarkup()
        # keyboard.add(types.InlineKeyboardButton(text=f'''üéÅ –ö–æ–Ω–∫—É—Ä—Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤''',callback_data=f'–∫–æ–Ω–∫—É—Ä—Å'))
        keyboard.add(types.InlineKeyboardButton(
            text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''', callback_data=f'ref'))
        bot.send_message(call.message.chat.id,
                         f'''{text}''', parse_mode='HTML', reply_markup=keyboard)

    elif call.data == '—Å–º–µ–Ω–∞–ø—Ä–∞–π—Å–∞':
        msg = bot.send_message(call.message.chat.id, f'–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—ã —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ 4 —à—Ç –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è',
                               parse_mode='HTML', reply_markup=keyboards.otmena)
        bot.register_next_step_handler(msg, smena_prace)

    elif call.data == '—Ä–µ–∫–ª–∞–º–∞—á–∞—Ç–∞':
        connection = connect(host=config.bd_host, user=config.bd_login, password=config.bd_pass,
                             database=config.bd_base)
        q = connection.cursor()
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton(text=f'''üöÄ –í—Å—Ç—É–ø–∏—Ç—å –≤ —á–∞—Ç''', url=f'https://t.me/joinchat/qurKRfvUjq1iMmFi'))
        keyboard.add(types.InlineKeyboardButton(
            text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''', callback_data=f'–ì–ª–∞–≤–Ω–æ–µ'))
        bot.send_message(call.message.chat.id, '–ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å!')
        q.execute("SELECT * FROM ugc_users")
        row = q.fetchall()
        for i in row:
            time.sleep(0.3)
            try:
                bot.send_message(i[0],
                                 f'''üí¢ –í—Å—Ç—É–ø–∞–π—Ç–µ –≤ —á–∞—Ç –∏ –æ–±—Å—É–∂–¥–∞–π—Ç–µ –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–π—Ç–µ —Å–≤–æ–π –∏–¥–µ–π !''',
                                 parse_mode='HTML', reply_markup=keyboard)
            except:
                pass
        bot.send_message(call.message.chat.id, '–ì–æ—Ç–æ–≤–æ | /admin')


bot.polling(True)
